; OM File Header - Saved 2009/10/26 10:58:39
; (6.0011 :patc (om-make-point 170 186) (om-make-point 50 50) (om-make-point 500 400) "" 183 0 nil "2009/10/26 10:58:33")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCS" "OMRC")))(setf *om-current-persistent* (om-load-patch1 "rc tutorial-04b" (quote ((om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 438 116) (om-make-point 20 28) 2 "2" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 416 116) (om-make-point 20 28) 0 "0" nil) (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "VOICES" "VOICES" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (1 (1 (1 -2 1 1)) 1 1)) ((4 4) (1 (1 (1 2 1 1)) -1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote (((0) ((0) nil (0) (0)) (0) (0)) ((0) ((0) (0) (0) (0)) nil (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj))))) (om-make-point 586 303) (om-make-point 120 86) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (14 (((4 4) (2 2)) ((4 4) (1 3)) ((4 4) (2 1 (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 1)) 2.0)) ((4 4) (1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((4 4) (1.0 (1 (1.0 1)) (1 (1.0 1)) 1.0)) ((4 4) (1.0 (1 (1.0 1)) 1.0 (1 (1.0 1)))) ((4 4) (1.0 2 1)) ((4 4) (3.0 1)) ((4 4) (1.0 2 1)) ((4 4) (3 1)) ((4 4) (1.0 1 (1 (1.0 1)) 1.0)) ((4 4) ((1 (1.0 1)) 3.0)) ((4 4) ((1 (1.0 -1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1980)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1980)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (990)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (2970)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1980)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (990)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (495)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (495)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (495)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (495)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (495)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (495)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (495)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (495)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1980)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (990)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (990)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1980)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (990)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (2970)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (990)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (990)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (495)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (495)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 99 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote (((nil) (nil)) ((nil) (nil)) ((nil) (nil) ((nil) (nil))) ((nil) ((nil) (nil)) (nil)) ((nil) ((nil) (nil)) (nil) ((nil) (nil))) ((nil) ((nil) (nil)) ((nil) (nil)) (nil)) ((nil) ((nil) (nil)) (nil) ((nil) (nil))) ((nil) (nil) (nil)) ((nil) (nil)) ((nil) (nil) (nil)) ((nil) (nil)) ((nil) (nil) ((nil) (nil)) (nil)) (((nil) (nil)) (nil)) (((nil) nil) nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote ((((nil) (nil)) ((nil) (nil)) ((nil) (nil) ((nil) (nil))) ((nil) ((nil) (nil)) (nil)) ((nil) ((nil) (nil)) (nil) ((nil) (nil))) ((nil) ((nil) (nil)) ((nil) (nil)) (nil)) ((nil) ((nil) (nil)) (nil) ((nil) (nil))) ((nil) (nil) (nil)) ((nil) (nil)) ((nil) (nil) (nil)) ((nil) (nil)) ((nil) (nil) ((nil) (nil)) (nil)) (((nil) (nil)) (nil)) (((nil) nil) nil))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.04 nil))))) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale microplay obj-mode palette-mode inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos show-stems)) (list nil nil 0 0 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g)) 24 2 1 nil 1000 0 (om-make-point 500 280) (om-make-point 10 40) (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "t" (quote t) (quote nil) (om-make-point 663 197) (om-make-point 59 28) (quote rc::voice) "rc::voice" nil) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 627 197) (om-make-point 26 28) 60 "60" nil) (om-load-boxcall (quote genfun) "VIEW-PRESETS" (quote rc::view-presets) (quote ((om-load-inputfun (quote input-funbox) "voice nr" "VOICE" 0) (om-load-inputfun (quote input-funbox) "bpm" "TEMPO" 60) (om-load-inputfunmenu1 (quote input-funmenu) "format" "OUTPUT" (quote rc::simple) (list (list "simple" (quote (quote rc::simple))) (list "voices" (quote (quote rc::voice))) (list "poly" (quote (quote rc::poly))))))) (om-make-point 611 236) nil nil nil nil 1) (om-load-boxcall (quote genfun) "R-SYNC-OVER-BARLINE111" (quote rc::r-sync-over-barline) (quote ((om-load-inputfun (quote input-funbox) "rhythmlayer" "RHYTHM-LAYER-NR" 2) (om-load-inputfun (quote input-funbox) "notevalues" "ALLOWED-SYNCOPES" (list 0 1/8)) (om-load-inputfunmenu1 (quote input-funmenu) "empty-measures?" "SPECIAL-CASE" (quote rc::no-empty-m) (list (list "no-empty-measures" (quote (quote rc::no-empty-m))) (list "empty-measures" (quote (quote rc::empty-m))))))) (om-make-point 206 184) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PRESET-LAYER1" (quote rc::preset-layer) (quote ((om-load-inputfun (quote input-funbox) "measurelayer" "RHYTHMSEQ" (list 1/4 1/4 1/4 1/4 1/4 1/4 1/4 1/4)))) (om-make-point 143 45) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 366 125) (om-make-point 20 28) 2 "2" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 342 125) (om-make-point 20 28) 1 "1" nil) (om-load-boxcall (quote genfun) "DECODE-ENGINE" (quote rc::decode-engine) (quote ((om-load-inputfun (quote input-funbox) "from engine" "SOL" nil) (om-load-inputfun (quote input-funbox) "bpm" "TEMPO" 60) (om-load-inputfunmenu1 (quote input-funmenu) "format" "OUTPUT" (quote rc::voice) (list (list "poly-list" (quote (quote rc::poly))) (list "voice-list" (quote (quote rc::voice))) (list "simple" (quote (quote rc::simple))))))) (om-make-point 130 351) nil nil nil nil 1) (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "VOICES" "VOICES" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (1 (1 (1 -2 1 1)) 1 1)) ((4 4) (1 (1 (1 2 1 1)) -1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote (((0) ((0) nil (0) (0)) (0) (0)) ((0) ((0) (0) (0) (0)) nil (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj))))) (om-make-point 22 430) (om-make-point 613 148) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (29/8 (((4 4) (2 2)) ((3 4) (1 2)) ((4 8) (2.0 2)) ((2 4) (1.0 1)) ((3 8) (1.0 2)) ((2 4) (1.0 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1980)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1980)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (990)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1980)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (990)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (990)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (990)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (990)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 99 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote (((nil) (nil)) ((nil) (nil)) ((nil) (nil)) ((nil) (nil)) ((nil) (nil)) ((nil) (nil))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (29/8 (((4 4) ((1 (3 1)) (1 (1 1 1 1)) 1 (1 (1.0 1 1 1)))) ((3 4) ((1 (1 1 1 1 1)) (1 (1 1 1 1)) (1 (1 3)))) ((4 8) (1 (1 (1.0 1)) 1 (1 (1.0 1)))) ((2 4) ((1 (3 1)) (1 (-1 1 1)))) ((3 8) ((1 (1 1)) (1 (1 1)) (1 (1 1)))) ((2 4) ((1 (1 3)) (1 (1 1 1 1 1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (742)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (990)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (198)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (198)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (198)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (198)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (198)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (742)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (495)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (495)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (742)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (330)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (330)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (248)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (742)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (198)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (198)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (198)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (198)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (198)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 99 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote ((((nil) (nil)) ((nil) (nil) (nil) (nil)) (nil) ((nil) (nil) (nil) (nil))) (((nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil)) ((nil) (nil))) ((nil) ((nil) (nil)) (nil) ((nil) (nil))) (((nil) (nil)) (nil (nil) (nil))) (((nil) (nil)) ((nil) (nil)) ((nil) (nil))) (((nil) (nil)) ((nil) (nil) (nil) (nil) (nil)))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote ((((nil) (nil)) ((nil) (nil)) ((nil) (nil)) ((nil) (nil)) ((nil) (nil)) ((nil) (nil))) ((((nil) (nil)) ((nil) (nil) (nil) (nil)) (nil) ((nil) (nil) (nil) (nil))) (((nil) (nil) (nil) (nil) (nil)) ((nil) (nil) (nil) (nil)) ((nil) (nil))) ((nil) ((nil) (nil)) (nil) ((nil) (nil))) (((nil) (nil)) (nil (nil) (nil))) (((nil) (nil)) ((nil) (nil)) ((nil) (nil))) (((nil) (nil)) ((nil) (nil) (nil) (nil) (nil))))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale microplay obj-mode palette-mode approx fontsize staff cmnpref deltapict outport inport zoom notechancolor? grillestep mode winsize winpos show-stems)) (list nil nil 0 0 2 24 (list (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) 0 0 1 nil 1000 0 18350450 2621450 (quote t))) t nil nil nil) (om-load-boxcall (quote genfun) "R-BEAT-SUBDIV" (quote rc::r-beat-subdiv) (quote ((om-load-inputfun (quote input-funbox) "rhythmlayer" "RHYTHM-LAYER-NR" 2) (om-load-inputfun (quote input-funbox) "beatvalue" "BEATVALUE1" 4) (om-load-inputfun (quote input-funbox) "subdiv-list" "SUBDIV1" (list 1 2 3 4 5)) (om-load-inputfun (quote input-funbox) "beatvalue" "BEATVALUE2" 8) (om-load-inputfun (quote input-funbox) "subdiv-list" "SUBDIV2" (list 1 2)))) (om-make-point 445 196) nil nil nil nil 1) (om-load-boxcall (quote genfun) "R-EQLENGTH1" (quote rc::r-eqlength) (quote ((om-load-inputfun (quote input-funbox) "layernr" "LAYER1" 0) (om-load-inputfun (quote input-funbox) "layernr" "LAYER2" 2))) (om-make-point 398 146) nil nil nil nil 1) (om-load-boxcall (quote genfun) "R-HIERARCHY" (quote rc::r-hierarchy) (quote ((om-load-inputfun (quote input-funbox) "layernr" "LAYERHIGH" 1) (om-load-inputfun (quote input-funbox) "layernr" "LAYERLOW" 2))) (om-make-point 322 155) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "APPEND" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 332 291) (om-make-point 70 37) nil nil nil 1) (om-load-boxcall (quote genfun) "RULES->PMC" (quote rc::rules->pmc) (quote ((om-load-inputfun (quote input-funbox) "rules" "VOICE0" nil))) (om-make-point 333 331) nil nil nil nil 1) (om-load-boxcall (quote bastype) "list11" (quote list) (quote nil) (om-make-point 229 51) (om-make-point 239 52) (list (list 1/20 1/20 1/20 1/20 1/20) (list 5/16) (list -1/12 1/12 1/12) (list 1/24 1/24 1/24 1/16) (list 3/16) (list 1/16)) "((1/20 1/20 1/20 1/20 1/20)(5/16)(-1/12 1/12 1/12)(1/24 1/24 1/24 1/16)(3/16)(1/16))" nil) (om-load-boxcall (quote bastype) "list1" (quote list) (quote nil) (om-make-point 75 5) (om-make-point 301 38) (list 1/2 1/2 1/4 3/4 1/2 3/8 1/2 1 1/2 1/2 1/4 3/4 1/2 3/8 1/2 1 1/2 1/2 1/4 3/4 1/2 3/8 1/2 1) "(1/2 1/2 1/4 3/4 2/4 3/8 1/2 1 1/2 1/2 1/4 3/4 2/4 3/8 1/2 1 1/2 1/2 1/4 3/4 2/4 3/8 1/2 1)" nil) (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 13 49) (om-make-point 103 41) (list (list 4 4) (list 3 4) (list 2 4) (list 4 8) (list 2 8) (list 3 8)) "((4 4)(3 4)(2 4)(4 8)(2 8)(3 8))" nil) (om-load-boxcall (quote genfun) "VOICE-DOMAIN" (quote rc::voice-domain) (quote ((om-load-inputfun (quote input-funbox) "timesigns" "TIMESIGN-LIST" nil) (om-load-inputfun (quote input-funbox) "layer1" "RHYTHMCELL-LIST1" nil) (om-load-inputfun (quote input-funbox) "layer2" "RHYTHMCELL-LIST2" nil))) (om-make-point 72 121) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DOMAINS->PMC" (quote rc::domains->pmc) (quote ((om-load-inputfun (quote input-funbox) "number of variables" "N-VAR" 40) (om-load-inputfun (quote input-funbox) "voice-domain" "VOICE0" nil))) (om-make-point 42 190) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PMC-ENGINE" (quote omcs::pmc-engine) (quote ((om-load-inputfun (quote input-funbox) "s-space" "S-SPACE" nil) (om-load-inputfun (quote input-funbox) "rules" "RULES" nil))) (om-make-point 121 283) nil nil nil nil 1))) (quote ((5 0 2 1 nil 0) (4 0 5 1 nil 0) (3 0 5 2 nil 0) (18 0 7 0 nil 0) (22 0 10 0 nil 0) (10 0 11 1 nil 0) (1 0 13 0 nil 0) (0 0 13 1 nil 0) (9 0 14 0 nil 0) (8 0 14 1 nil 0) (6 0 15 0 nil 0) (14 0 15 1 nil 0) (13 0 15 2 nil 0) (12 0 15 3 nil 0) (15 0 16 0 nil 0) (19 0 20 0 nil 0) (7 0 20 1 nil 0) (17 0 20 2 nil 0) (20 0 21 1 nil 0) (21 0 22 0 nil 0) (16 0 22 1 nil 0))) nil 6.04))
