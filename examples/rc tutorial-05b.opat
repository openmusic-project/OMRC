
(:patch
 (:om-version 0.03)
 (:name "rc tutorial-05b")
 (:doc "")
 (:info
  (:created "2019/09/20 14:59:16")
  (:modified "2019/09/20 15:48:17"))
 (:window (:size (912 766)) (:position (549 201)))
 (:grid nil)
 (:lock nil)
 (:boxes
  (:box
   (:type :value)
   (:reference symbol)
   (:group-id nil)
   (:name "aux1")
   (:x 394)
   (:y 283)
   (:w 32)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value t)
   (:id 0))
  (:box
   (:library "OMRC")
   (:type :function)
   (:reference (:symbol "R-LAYERORDER" "RC"))
   (:group-id nil)
   (:name "r-layerorder")
   (:x 755)
   (:y 79)
   (:w 97)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "LAYER1")
     (:value 0)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LAYER2")
     (:value 2)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "ENDTIME")
     (:value 5)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 1))
  (:box
   (:library "OMRC")
   (:type :function)
   (:reference (:symbol "R-EQLENGTH" "RC"))
   (:group-id nil)
   (:name "r-eqlength")
   (:x 709)
   (:y 126)
   (:w 89)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "LAYER1")
     (:value 0)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LAYER2")
     (:value 2)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 2))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "aux")
   (:x 12)
   (:y 59)
   (:w 140)
   (:h 30)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list (:list 4 4) (:list 3 4) (:list 3 8) (:list 2 8)))
   (:id 3))
  (:box
   (:type :object)
   (:reference poly)
   (:group-id nil)
   (:name "POLY")
   (:x 97)
   (:y 431)
   (:w 722)
   (:h 216)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:name "POLY")
   (:display :mini-view)
   (:showname nil)
   (:show-markers t)
   (:group-id nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SELF")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "OBJ-LIST")
     (:value nil)
     (:reactive nil)))
   (:outputs
    (:output (:name "SELF") (:reactive nil))
    (:output (:name "OBJ-LIST") (:reactive nil)))
   (:window (:size (1052 407)) (:position (411 195)))
   (:edition-params
    (:h-stretch 1)
    (:font-size 20)
    (:time-map
     (:list
      (:list -1000 0)
      (:list 0 15.5)
      (:list 200 28.5)
      (:list 400 32.0)
      (:list 600 35.5)
      (:list 800 39.0)
      (:list 1000 42.5)
      (:list 1250 48.0)
      (:list 1500 51.625)
      (:list 1750 56.675)
      (:list 2000 61.1)
      (:list 2250 65.35)
      (:list 2500 68.975)
      (:list 3000 73.225)
      (:list 3200 77.475)
      (:list 3400 80.975)
      (:list 3600 84.475)
      (:list 3800 87.975)
      (:list 4000 121.475)
      (:list 4250 134.475)
      (:list 4500 138.1)
      (:list 5000 141.725)
      (:list 5333 145.975)
      (:list 5500 179.39168)
      (:list 5833 183.64168)
      (:list 6167 187.475)
      (:list 6500 191.30834)
      (:list 6750 196.18334)
      (:list 7250 200.43334)
      (:list 7500 204.05834)
      (:list 7700 209.55834)
      (:list 7900 213.05834)
      (:list 8100 216.55834)
      (:list 8300 220.05834)
      (:list 8500 223.55834)
      (:list 9000 229.05834)
      (:list 9500 263.30835)
      (:list 9750 267.55835)
      (:list 10000 271.18335)
      (:list 10250 275.43335)
      (:list 10500 279.05835)
      (:list 10750 283.30835)
      (:list 11500 288.18335)
      (:list 11750 293.05835)
      (:list 12500 327.93335)
      (:list 12833 332.80835)
      (:list 13000 336.225)
      (:list 13500 339.64166)
      (:list 13667 343.05832)
      (:list 14000 376.89166)
      (:list 14500 381.76666)
      (:list 14750 385.39166)
      (:list 15000 389.01666)
      (:list 15750 399.51666)
      (:list 16000 403.14166)
      (:list 16250 408.64166)
      (:list 16500 412.26666)
      (:list 16750 415.89166)
      (:list 17000 419.51666)
      (:list 17250 423.14166)
      (:list 17500 426.76666)
      (:list 17750 430.39166))))
   (:value
    (:object
     (:class poly)
     (:slots
      ((:chord-seqs
        (:list
         (:object
          (:class voice)
          (:slots
           ((:onset 0)
            (:duration 17999)
            (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
            (:symbolic-date nil)
            (:symbolic-dur nil)
            (:symbolic-dur-extent 0)
            (:lmidic
             (:list
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)))
            (:lonset (:list 0 5000 10000 15000 18000))
            (:ldur
             (:list
              (:list 4999)
              (:list 4999)
              (:list 4999)
              (:list 2999)))
            (:lvel (:list (:list 80) (:list 80) (:list 80) (:list 80)))
            (:loffset (:list (:list 0) (:list 0) (:list 0) (:list 0)))
            (:lchan (:list (:list 1) (:list 1) (:list 1) (:list 1)))
            (:lport (:list nil nil nil nil))
            (:llegato nil)
            (:tree
             (:list
              6
              (:list
               (:list (:list 4 4) (:list 4))
               (:list (:list 3 8) (:list 2.0 1))
               (:list (:list 4 4) (:list 4.0))
               (:list (:list 3 4) (:list (:list 1 (:list 1.0 1)) 2.0))
               (:list (:list 3 8) (:list 3.0))
               (:list (:list 4 4) (:list 1.0 3)))))
            (:tempo 60)))
          (:add-slots
           ((:lvel (:list (:list 80) (:list 80) (:list 80) (:list 80)))
            (:loffset (:list (:list 0) (:list 0) (:list 0) (:list 0)))
            (:lchan (:list (:list 1) (:list 1) (:list 1) (:list 1)))
            (:lport (:list nil nil nil nil)))))
         (:object
          (:class voice)
          (:slots
           ((:onset 0)
            (:duration 17999)
            (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
            (:symbolic-date nil)
            (:symbolic-dur nil)
            (:symbolic-dur-extent 0)
            (:lmidic
             (:list
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)))
            (:lonset
             (:list
              0
              1500
              2250
              2500
              4000
              4250
              5000
              6500
              7250
              7500
              9000
              9750
              10000
              10750
              14750
              15000
              16500
              16750
              17500
              17750
              18000))
            (:ldur
             (:list
              (:list 1499)
              (:list 749)
              (:list 249)
              (:list 1499)
              (:list 249)
              (:list 749)
              (:list 1499)
              (:list 749)
              (:list 249)
              (:list 1499)
              (:list 749)
              (:list 249)
              (:list 749)
              (:list 3999)
              (:list 249)
              (:list 1499)
              (:list 249)
              (:list 749)
              (:list 249)
              (:list 249)))
            (:lvel
             (:list
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)))
            (:loffset
             (:list
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)))
            (:lchan
             (:list
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)))
            (:lport
             (:list
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil))
            (:llegato nil)
            (:tree
             (:list
              6
              (:list
               (:list
                (:list 4 4)
                (:list
                 1
                 (:list 1 (:list 1.0 1))
                 (:list 1 (:list 1.0 1 2))
                 1.0))
               (:list (:list 3 8) (:list (:list 1 (:list 1 1)) 1.0 1))
               (:list
                (:list 4 4)
                (:list
                 1.0
                 (:list 1 (:list 3 1))
                 1
                 (:list 1 (:list 1.0 1))))
               (:list
                (:list 3 4)
                (:list
                 (:list 1 (:list 1.0 1 2))
                 (:list 1 (:list 1.0 3))
                 1.0))
               (:list (:list 3 8) (:list 3.0))
               (:list
                (:list 4 4)
                (:list
                 (:list 1 (:list 3.0 1))
                 1
                 (:list 1 (:list 2.0 1 1))
                 (:list 1 (:list 2.0 1 1)))))))
            (:tempo 60)))
          (:add-slots
           ((:lvel
             (:list
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)))
            (:loffset
             (:list
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)))
            (:lchan
             (:list
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)
              (:list 2)))
            (:lport
             (:list
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil)))))
         (:object
          (:class voice)
          (:slots
           ((:onset 0)
            (:duration 17999)
            (:interpol (:number-or-nil (:number 50) (:t-or-nil nil)))
            (:symbolic-date nil)
            (:symbolic-dur nil)
            (:symbolic-dur-extent 0)
            (:lmidic
             (:list
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 5800)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)
              (:list 6000)))
            (:lonset
             (:list
              0
              200
              400
              600
              800
              1000
              1250
              1500
              1750
              2250
              2500
              3000
              3200
              3400
              3600
              3800
              4000
              4250
              5000
              5333
              5833
              6167
              6500
              6750
              7250
              7500
              7700
              7900
              8100
              8300
              8500
              9000
              9750
              10000
              10250
              10500
              10750
              11500
              11750
              12500
              12833
              13667
              14500
              14750
              15000
              15750
              16000
              16250
              16500
              16750
              17250
              17500
              17750
              18000))
            (:ldur
             (:list
              (:list 199)
              (:list 199)
              (:list 199)
              (:list 199)
              (:list 199)
              (:list 249)
              (:list 249)
              (:list 249)
              (:list 499)
              (:list 249)
              (:list 499)
              (:list 199)
              (:list 199)
              (:list 199)
              (:list 199)
              (:list 199)
              (:list 249)
              (:list 749)
              (:list 332)
              (:list 499)
              (:list 333)
              (:list 332)
              (:list 249)
              (:list 499)
              (:list 249)
              (:list 199)
              (:list 199)
              (:list 199)
              (:list 199)
              (:list 199)
              (:list 499)
              (:list 749)
              (:list 249)
              (:list 249)
              (:list 249)
              (:list 249)
              (:list 749)
              (:list 249)
              (:list 749)
              (:list 332)
              (:list 833)
              (:list 832)
              (:list 249)
              (:list 249)
              (:list 749)
              (:list 249)
              (:list 249)
              (:list 249)
              (:list 249)
              (:list 499)
              (:list 249)
              (:list 249)
              (:list 249)))
            (:lvel
             (:list
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)))
            (:loffset
             (:list
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)))
            (:lchan
             (:list
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)))
            (:lport
             (:list
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil))
            (:llegato nil)
            (:tree
             (:list
              6
              (:list
               (:list
                (:list 4 4)
                (:list
                 (:list 1 (:list 1 1 1 1 1))
                 (:list 1 (:list 1 1 1 1))
                 (:list 1 (:list 1.0 1 2))
                 (:list 1 (:list 1 1 1 1 1))))
               (:list
                (:list 3 8)
                (:list
                 (:list 1 (:list 1 1))
                 1.0
                 (:list 1 (:list 2 1))))
               (:list
                (:list 4 4)
                (:list
                 (:list 1 (:list 1.0 1 1))
                 (:list 1 (:list 1 2 1))
                 (:list 1 (:list 1 1 1 1 1))
                 (:list 1 (:list 1 1))))
               (:list
                (:list 3 4)
                (:list
                 (:list 1 (:list 1.0 1 1 1))
                 (:list 1 (:list 1 3))
                 (:list 1 (:list 1 3))))
               (:list
                (:list 3 8)
                (:list
                 (:list 1 (:list 2 1))
                 1.0
                 (:list 1 (:list 1.0 2))))
               (:list
                (:list 4 4)
                (:list
                 (:list 1 (:list 2.0 1 1))
                 (:list 1 (:list 3 1))
                 (:list 1 (:list 1 1 1 1))
                 (:list 1 (:list 1.0 1 1 1)))))))
            (:tempo 60)))
          (:add-slots
           ((:lvel
             (:list
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)
              (:list 80)))
            (:loffset
             (:list
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)
              (:list 0)))
            (:lchan
             (:list
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)
              (:list 3)))
            (:lport
             (:list
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil
              nil)))))))
       (:symbolic-date nil)
       (:symbolic-dur nil)
       (:symbolic-dur-extent 0)))))
   (:id 4))
  (:box
   (:library "OMRC")
   (:type :function)
   (:reference (:symbol "R-HIERARCHY" "RC"))
   (:group-id nil)
   (:name "r-hierarchy")
   (:x 369)
   (:y 107)
   (:w 92)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "LAYERHIGH")
     (:value 1)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LAYERLOW")
     (:value 2)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 5))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "list121")
   (:x 124)
   (:y 0)
   (:w 99)
   (:h 40)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list 5/4 5/4 5/4 5/4 5/4 5/4 5/4))
   (:id 6))
  (:box
   (:library "OMRC")
   (:type :function)
   (:reference (:symbol "PRESET-LAYER" "RC"))
   (:group-id nil)
   (:name "preset-layer")
   (:x 126)
   (:y 107)
   (:w 97)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "RHYTHMSEQ")
     (:value (:list 1/4 1/4 1/4 1/4 1/4 1/4 1/4 1/4))
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 7))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "list12")
   (:x 201)
   (:y 59)
   (:w 85)
   (:h 40)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value (:list (:list 1) (:list 3/8) (:list 3/16) (:list 1/16)))
   (:id 8))
  (:box
   (:type :value)
   (:reference cons)
   (:group-id nil)
   (:name "list2")
   (:x 259)
   (:y 107)
   (:w 80)
   (:h 51)
   (:color
    (:color-or-nil (:color (:color 1.0 1.0 1.0 1.0)) (:t-or-nil t)))
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:inputs)
   (:outputs (:output (:name "value") (:reactive nil)))
   (:value
    (:list
     (:list 1/16)
     (:list 1/8)
     (:list 3/16)
     (:list 1/20)
     (:list 5/24)
     (:list 1/12)))
   (:id 9))
  (:box
   (:library "OMRC")
   (:type :function)
   (:reference (:symbol "VOICE-DOMAIN" "RC"))
   (:group-id nil)
   (:name "voice-domain")
   (:x 138)
   (:y 172)
   (:w 104)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "TIMESIGN-LIST")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RHYTHMCELL-LIST1")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "rhythmcell-list2")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "rhythmcell-list3")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 10))
  (:box
   (:library "OMRC")
   (:type :function)
   (:reference (:symbol "DECODE-ENGINE" "RC"))
   (:group-id nil)
   (:name "decode-engine")
   (:x 358)
   (:y 368)
   (:w 111)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "SOL")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "TEMPO")
     (:value 60)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "output")
     (:value (:symbol "VOICE" "RC"))
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 11))
  (:box
   (:library "OMRC")
   (:type :function)
   (:reference (:symbol "R-BEAT-SUBDIV" "RC"))
   (:group-id nil)
   (:name "r-beat-subdiv")
   (:x 474)
   (:y 29)
   (:w 103)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "RHYTHM-LAYER-NR")
     (:value 3)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "BEATVALUE1")
     (:value 4)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "SUBDIV1")
     (:value (:list 1 2 3 4 5))
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "beatvalue2")
     (:value 8)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "subdiv2")
     (:value (:list 1 2 3))
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 12))
  (:box
   (:library "OMRC")
   (:type :function)
   (:reference (:symbol "R-HIERARCHY" "RC"))
   (:group-id nil)
   (:name "r-hierarchy")
   (:x 428)
   (:y 69)
   (:w 92)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "LAYERHIGH")
     (:value 2)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LAYERLOW")
     (:value 3)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 13))
  (:box
   (:library "OMRC")
   (:type :function)
   (:reference (:symbol "R-EQLENGTH" "RC"))
   (:group-id nil)
   (:name "r-eqlength")
   (:x 539)
   (:y 98)
   (:w 89)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "LAYER1")
     (:value 2)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "LAYER2")
     (:value 3)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 14))
  (:box
   (:type :function)
   (:reference append)
   (:group-id nil)
   (:name "append")
   (:x 449)
   (:y 180)
   (:w 178)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "lists")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "lists")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "lists")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "lists")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "lists")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "lists")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 15))
  (:box
   (:library "OMRC")
   (:type :function)
   (:reference (:symbol "RULES->PMC" "RC"))
   (:group-id nil)
   (:name "rules->pmc")
   (:x 487)
   (:y 227)
   (:w 93)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "VOICE0")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 16))
  (:box
   (:library "OMRC")
   (:type :function)
   (:reference (:symbol "DOMAINS->PMC" "RC"))
   (:group-id nil)
   (:name "domains->pmc")
   (:x 113)
   (:y 229)
   (:w 110)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "N-VAR")
     (:value 80)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "VOICE0")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 17))
  (:box
   (:library "OMCS")
   (:type :function)
   (:reference (:symbol "PMC-ENGINE" "OMCS"))
   (:group-id nil)
   (:name "pmc-engine")
   (:x 335)
   (:y 313)
   (:w 96)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :standard)
     (:name "S-SPACE")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "RULES")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "heuristic-rules")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "fwc-rules")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "sols-mode")
     (:value :once)
     (:reactive nil))
    (:input
     (:type :optional)
     (:name "rnd?")
     (:value t)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 18))
  (:box
   (:type :function)
   (:reference list)
   (:group-id nil)
   (:name "list")
   (:x 650)
   (:y 104)
   (:w 52)
   (:h 30)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:lock nil)
   (:lambda nil)
   (:inputs
    (:input
     (:type :optional)
     (:name "x")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "out") (:reactive nil)))
   (:id 19))
  (:box
   (:type :abstraction)
   (:reference
    (:patch
     (:om-version 0.03)
     (:name "mypatch")
     (:doc "")
     (:info (:created nil) (:modified nil))
     (:window (:size (830 572)) (:position (535 305)))
     (:grid nil)
     (:lock nil)
     (:boxes
      (:box
       (:type :io)
       (:reference
        (:in
         (:type omin)
         (:index 1)
         (:name "input")
         (:doc "no documentation")))
       (:group-id nil)
       (:name "input")
       (:x 5)
       (:y 45)
       (:w 50)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 0))
      (:box
       (:type :io)
       (:reference
        (:out (:type omout) (:name "output") (:index 1) (:doc nil)))
       (:group-id nil)
       (:name "output")
       (:x 123)
       (:y 486)
       (:w 58)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs
        (:input
         (:type :standard)
         (:name "out-value")
         (:value nil)
         (:reactive nil)))
       (:outputs)
       (:id 1))
      (:box
       (:type :io)
       (:reference
        (:in
         (:type omin)
         (:index 2)
         (:name "input1")
         (:doc "no documentation")))
       (:group-id nil)
       (:name "input1")
       (:x 267)
       (:y 42)
       (:w 56)
       (:h 42)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 0.0))
         (:t-or-nil t)))
       (:border 0)
       (:roundness 0)
       (:text-font nil)
       (:align :center)
       (:icon :top)
       (:inputs)
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 2))
      (:comment
       (:x 214)
       (:y 410)
       (:w 542)
       (:h 91)
       (:fgcolor (:color 0 0 0 1.0))
       (:bgcolor nil)
       (:border 0)
       (:roundness nil)
       (:text-font (:font (:face "Geneva") (:size 10) (:style :plain)))
       (:align nil)
       (:text
        "This rule check if the variable belongs to layer 2 or not. If not, it always gives true as an output (i.e. it will not affect other layers than number 2). If it does belong to layer 2, it checks if the element is identical to the one in layer 2 immediately before it. If it is identical, the output is false, otherwise true.

The rule will not allow repetitions of the same element in layer 2.")
       (:id 3))
      (:comment
       (:x 526)
       (:y 32)
       (:w 207)
       (:h 314)
       (:fgcolor (:color 0 0 0 1.0))
       (:bgcolor nil)
       (:border 0)
       (:roundness nil)
       (:text-font
        (:font (:face "Helvetica") (:size 10) (:style :plain)))
       (:align nil)
       (:text
        "A user defined rule always has 2 inputs. They are normally not accessed directly, but are used by the tools in the \"user rule tools\" menu to give the user access to different things. A basic example is the box \"get-this-cell\":

Get-this-cell only has 1 input, and it should be connected to the second input to the patch. It outputs the variable (i.e. the element from the domain) that is beeing checked at the moment. 

Get-last-cell has 2 inputs. They should be connected to the 2 inputs to the patch. It outputs the variable in the same layer as the one beeing checked at the moment, immediately before the one beeing checked. The engine has thus already accepted this variable as true according to all rules (but might now reconsider that decision...).

Get-layer-number outputs the layer number for the variable beeing checked.")
       (:id 4))
      (:comment
       (:x 311)
       (:y 89)
       (:w 191)
       (:h 43)
       (:fgcolor (:color 0 0 0 1.0))
       (:bgcolor nil)
       (:border 0)
       (:roundness nil)
       (:text-font
        (:font (:face "Helvetica") (:size 10) (:style :plain)))
       (:align nil)
       (:text
        "<-- The second input gives the variable beeing checked for the moment (as an object).")
       (:id 5))
      (:comment
       (:x 60)
       (:y 58)
       (:w 213)
       (:h 59)
       (:fgcolor (:color 0 0 0 1.0))
       (:bgcolor nil)
       (:border 0)
       (:roundness nil)
       (:text-font
        (:font (:face "Helvetica") (:size 10) (:style :plain)))
       (:align nil)
       (:text
        "<-- The first input gives the index  number for the variable the search engine is checking for the moment. This is used internally to keep track on where the engine is in the search.")
       (:id 6))
      (:box
       (:type :value)
       (:reference symbol)
       (:group-id nil)
       (:name "aux")
       (:x 152)
       (:y 378)
       (:w 32)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value t)
       (:id 7))
      (:box
       (:type :function)
       (:reference omif)
       (:group-id nil)
       (:name "omif")
       (:x 124)
       (:y 410)
       (:w 67)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "TEST")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "ACTION")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :optional)
         (:name "else")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 8))
      (:box
       (:type :value)
       (:reference fixnum)
       (:group-id nil)
       (:name "number")
       (:x 450)
       (:y 238)
       (:w 32)
       (:h 30)
       (:color
        (:color-or-nil
         (:color (:color 1.0 1.0 1.0 1.0))
         (:t-or-nil t)))
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:inputs)
       (:outputs (:output (:name "value") (:reactive nil)))
       (:value 2)
       (:id 9))
      (:box
       (:type :function)
       (:reference om=)
       (:group-id nil)
       (:name "om=")
       (:x 424)
       (:y 275)
       (:w 60)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "NUM1")
         (:value 0)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "NUM2")
         (:value 0)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 10))
      (:box
       (:library "OMRC")
       (:type :function)
       (:reference (:symbol "TEST-NOT-EQUAL" "RC"))
       (:group-id nil)
       (:name "test-not-equal")
       (:x 98)
       (:y 298)
       (:w 108)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "EV1")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "EV2")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 11))
      (:box
       (:library "OMRC")
       (:type :function)
       (:reference (:symbol "GET-LAYERNUMBER" "RC"))
       (:group-id nil)
       (:name "get-layernumber")
       (:x 382)
       (:y 183)
       (:w 120)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "X")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 12))
      (:box
       (:library "OMRC")
       (:type :function)
       (:reference (:symbol "GET-LAST-CELL" "RC"))
       (:group-id nil)
       (:name "get-last-cell")
       (:x 24)
       (:y 183)
       (:w 95)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "INDEXX")
         (:value nil)
         (:reactive nil))
        (:input
         (:type :standard)
         (:name "X")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 13))
      (:box
       (:library "OMRC")
       (:type :function)
       (:reference (:symbol "GET-THIS-CELL" "RC"))
       (:group-id nil)
       (:name "get-this-cell")
       (:x 205)
       (:y 183)
       (:w 95)
       (:h 30)
       (:color nil)
       (:border nil)
       (:roundness nil)
       (:text-font nil)
       (:align nil)
       (:lock nil)
       (:lambda nil)
       (:inputs
        (:input
         (:type :standard)
         (:name "X")
         (:value nil)
         (:reactive nil)))
       (:outputs (:output (:name "out") (:reactive nil)))
       (:id 14)))
     (:connections
      (:connection
       (:from (:box 0 :out 0))
       (:to (:box 13 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 2 :out 0))
       (:to (:box 12 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 2 :out 0))
       (:to (:box 13 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 2 :out 0))
       (:to (:box 14 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 7 :out 0))
       (:to (:box 8 :in 2))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 8 :out 0))
       (:to (:box 1 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 9 :out 0))
       (:to (:box 10 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 10 :out 0))
       (:to (:box 8 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 11 :out 0))
       (:to (:box 8 :in 1))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 12 :out 0))
       (:to (:box 10 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 13 :out 0))
       (:to (:box 11 :in 0))
       (:attributes (:color nil :style nil :modif nil)))
      (:connection
       (:from (:box 14 :out 0))
       (:to (:box 11 :in 1))
       (:attributes (:color nil :style nil :modif nil))))))
   (:group-id nil)
   (:name "mypatch")
   (:x 636)
   (:y 11)
   (:w 80)
   (:h 74)
   (:color nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align :center)
   (:display :mini-view)
   (:group-id nil)
   (:lock nil)
   (:lambda :lambda)
   (:pre-delay 0)
   (:inputs
    (:input
     (:type :standard)
     (:name "input")
     (:value nil)
     (:reactive nil))
    (:input
     (:type :standard)
     (:name "input1")
     (:value nil)
     (:reactive nil)))
   (:outputs (:output (:name "output") (:reactive nil)))
   (:id 20))
  (:comment
   (:x 660)
   (:y 654)
   (:w 156)
   (:h 36)
   (:fgcolor nil)
   (:bgcolor nil)
   (:border nil)
   (:roundness nil)
   (:text-font nil)
   (:align nil)
   (:text
    "doesn't not always terminate
=> abort / restart if necessary")
   (:id 21)))
 (:connections
  (:connection
   (:from (:box 0 :out 0))
   (:to (:box 18 :in 5))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 2 :out 0))
   (:to (:box 15 :in 5))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 3 :out 0))
   (:to (:box 10 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 5 :out 0))
   (:to (:box 15 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 6 :out 0))
   (:to (:box 7 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 7 :out 0))
   (:to (:box 10 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 8 :out 0))
   (:to (:box 10 :in 2))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 9 :out 0))
   (:to (:box 10 :in 3))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 10 :out 0))
   (:to (:box 17 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 11 :out 0))
   (:to (:box 4 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 12 :out 0))
   (:to (:box 15 :in 2))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 13 :out 0))
   (:to (:box 15 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 14 :out 0))
   (:to (:box 15 :in 3))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 15 :out 0))
   (:to (:box 16 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 16 :out 0))
   (:to (:box 18 :in 1))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 17 :out 0))
   (:to (:box 18 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 18 :out 0))
   (:to (:box 11 :in 0))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 19 :out 0))
   (:to (:box 15 :in 4))
   (:attributes (:color nil :style nil :modif nil)))
  (:connection
   (:from (:box 20 :out 0))
   (:to (:box 19 :in 0))
   (:attributes (:color nil :style nil :modif nil)))))