; OM File Header - Saved 2009/10/26 10:58:39
; (6.0011 :patc (om-make-point 473 75) (om-make-point 50 50) (om-make-point 500 400) "" 183 0 nil "2009/10/26 10:58:33")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCS" "OMRC")))(setf *om-current-persistent* (om-load-patch1 "rc tutorial-03e" (quote ((om-load-boxcall (quote bastype) "aux7" (quote t) (quote nil) (om-make-point 493 117) (om-make-point 40 28) (list 1 2) "(1 2)" nil) (om-load-boxcall (quote bastype) "aux6" (quote t) (quote nil) (om-make-point 457 120) (om-make-point 20 28) 8 "8" nil) (om-load-boxcall (quote bastype) "aux5" (quote t) (quote nil) (om-make-point 444 93) (om-make-point 60 28) (list 1 2 3 5) "(1 2 3 5)" nil) (om-load-boxcall (quote bastype) "aux4" (quote t) (quote nil) (om-make-point 422 93) (om-make-point 20 28) 4 "4" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 414 117) (om-make-point 20 28) 1 "1" nil) (om-load-boxcall (quote bastype) "aux3" (quote t) (quote nil) (om-make-point 19 42) (om-make-point 170 28) (list (list 4 4) (list 3 4) (list 5 4) (list 3 8) (list 5 8)) "((4 4) (3 4) (5 4) (3 8) (5 8))" nil) (om-load-boxcall (quote genfun) "R-BEAT-SUBDIV" (quote rc::r-beat-subdiv) (quote ((om-load-inputfun (quote input-funbox) "rhythmlayer" "RHYTHM-LAYER-NR" 1) (om-load-inputfun (quote input-funbox) "beatvalue" "BEATVALUE1" 4) (om-load-inputfun (quote input-funbox) "subdiv-list" "SUBDIV1" (list 1 2 3 5)) (om-load-inputfun (quote input-funbox) "beatvalue" "BEATVALUE2" 8) (om-load-inputfun (quote input-funbox) "subdiv-list" "SUBDIV2" (list 1 2 3)))) (om-make-point 406 148) nil nil nil "r-beat-subdiv" 1) (om-load-boxcall (quote lispfun) "APPEND11" (quote append) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 341 226) (om-make-point 73 37) nil nil "append" 1) (om-load-boxcall (quote bastype) "aux2" (quote t) (quote nil) (om-make-point 312 120) (om-make-point 20 28) 1 "1" nil) (om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 290 120) (om-make-point 20 28) 0 "0" nil) (om-load-boxcall (quote genfun) "R-EQLENGTH1" (quote rc::r-eqlength) (quote ((om-load-inputfun (quote input-funbox) "layernr" "LAYER1" 0) (om-load-inputfun (quote input-funbox) "layernr" "LAYER2" 1))) (om-make-point 279 150) nil nil nil nil 1) (om-load-boxcall (quote genfun) "RULES->PMC1" (quote rc::rules->pmc) (quote ((om-load-inputfun (quote input-funbox) "rules" "VOICE0" nil))) (om-make-point 343 272) nil nil nil nil 1) (om-load-editor-box1 "POLY111" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "VOICES" "VOICES" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (1 (1 (1 -2 1 1)) 1 1)) ((4 4) (1 (1 (1 2 1 1)) -1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote (((0) ((0) nil (0) (0)) (0) (0)) ((0) ((0) (0) (0) (0)) nil (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj))))) (om-make-point 81 377) (om-make-point 395 111) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5/2 (((4 4) ((1 (1 1)) (1 (1 1 1)) (1 (1 1 1)) (1 (2.0 1)))) ((3 4) ((1 (1 1 1)) (1 (2.0 1)) 1)) ((3 4) ((1 (1 -1)) -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (338)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (338)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (225)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (225)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (225)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (225)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (225)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (225)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (225)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (225)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (225)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (225)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (225)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (675)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (338)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord)))) :tempo (quote ((1/4 88) nil)) :legato 99 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote ((((0) (0)) ((0) (0) (0)) ((0) (0) (0)) ((0) (0))) (((0) (0) (0)) ((0) (0)) (0)) (((0) nil) nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((((0) (0)) ((0) (0) (0)) ((0) (0) (0)) ((0) (0))) (((0) (0) (0)) ((0) (0)) (0)) (((0) nil) nil))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale microplay obj-mode palette-mode inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos show-stems)) (list nil nil 0 0 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g)) 24 2 1 nil 1000 0 18350450 2621450 (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "aux2121" (quote t) (quote nil) (om-make-point 197 33) (om-make-point 218 42) (list (list 1/2 -1/8) (list 1/12 1/12) (list 1/12 1/4) (list 1/8) (list 1/16 1/20 1/20) (list 1/20 1/20 1/20)) "((1/2 -1/8) (1/12 1/12) (1/12 1/4) (1/8) (1/16 1/20 1/20) (1/20 1/20 1/20))" nil) (om-load-boxcall (quote genfun) "DECODE-ENGINE1111" (quote rc::decode-engine) (quote ((om-load-inputfun (quote input-funbox) "from engine" "SOL" nil) (om-load-inputfun (quote input-funbox) "bpm" "TEMPO" 88) (om-load-inputfunmenu1 (quote input-funmenu) "format" "OUTPUT" (quote rc::voice) (list (list "poly-list" (quote (quote rc::poly))) (list "voice-list" (quote (quote rc::voice))) (list "simple" (quote (quote rc::simple))))))) (om-make-point 127 315) nil nil nil nil 1) (om-load-boxcall (quote genfun) "VOICE-DOMAIN1111" (quote rc::voice-domain) (quote ((om-load-inputfun (quote input-funbox) "timesigns" "TIMESIGN-LIST" (list (list 4 4) (list 3 4) (list 5 8) (list 3 8))) (om-load-inputfun (quote input-funbox) "layer1" "RHYTHMCELL-LIST1" (list (list 1) (list 1/2) (list 1/4) (list 1/8))))) (om-make-point 120 111) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PMC-ENGINE1111" (quote omcs::pmc-engine) (quote ((om-load-inputfun (quote input-funbox) "s-space" "S-SPACE" nil) (om-load-inputfun (quote input-funbox) "rules" "RULES" nil))) (om-make-point 118 254) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DOMAINS->PMC1111" (quote rc::domains->pmc) (quote ((om-load-inputfun (quote input-funbox) "number of variables" "N-VAR" 12) (om-load-inputfun (quote input-funbox) "voice-domain" "VOICE0" nil))) (om-make-point 81 181) nil nil nil nil 1))) (quote ((4 0 6 0 nil 0) (3 0 6 1 nil 0) (2 0 6 2 ((om-make-point 472 119) (om-make-point 474 115) (om-make-point 448 115) (om-make-point 442 148)) 0) (1 0 6 3 nil 0) (0 0 6 4 nil 0) (10 0 7 0 nil 0) (6 0 7 1 nil 0) (9 0 10 0 nil 0) (8 0 10 1 nil 0) (7 0 11 0 nil 0) (14 0 12 1 nil 0) (16 0 14 0 nil 0) (5 0 15 0 nil 0) (13 0 15 1 nil 0) (17 0 16 0 nil 0) (11 0 16 1 nil 0) (15 0 17 1 nil 0))) nil 6.04))
