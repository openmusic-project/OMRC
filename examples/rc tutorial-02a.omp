; OM File Header - Saved 2009/10/26 10:58:39
; (6.0011 :patc (om-make-point 67 66) (om-make-point 50 50) (om-make-point 500 400) "" 183 0 nil "2009/10/26 10:58:33")
; End File Header
(in-package :om)(load-lib-for (quote ("OMCS" "OMRC")))(setf *om-current-persistent* (om-load-patch1 "rc tutorial-02a" (quote ((om-load-boxcall (quote bastype) "aux1" (quote t) (quote nil) (om-make-point 302 59) (om-make-point 20 28) 2 "2" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 262 58) (om-make-point 20 28) 1 "1" nil) (om-load-boxcall (quote genfun) "R-EQLENGTH" (quote rc::r-eqlength) (quote ((om-load-inputfun (quote input-funbox) "layernr" "LAYER1" 1) (om-load-inputfun (quote input-funbox) "layernr" "LAYER2" 2))) (om-make-point 262 93) nil nil nil nil 1) (om-load-boxcall (quote genfun) "RULES->PMC" (quote rc::rules->pmc) (quote ((om-load-inputfun (quote input-funbox) "rules" "VOICE0" nil))) (om-make-point 235 161) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux2111" (quote t) (quote nil) (om-make-point 108 58) (om-make-point 133 28) (list (list 1) (list 1/2) (list 1/4) (list 1/8)) "((1) (1/2) (1/4) (1/8))" nil) (om-load-editor-box1 "POLY11" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "objs" "SELF" nil) (om-load-inputfun (quote input-funbox) "VOICES" "VOICES" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (2 (((4 4) (1 (1 (1 -2 1 1)) 1 1)) ((4 4) (1 (1 (1 2 1 1)) -1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (400)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (200)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote (((0) ((0) nil (0) (0)) (0) (0)) ((0) ((0) (0) (0) (0)) nil (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj))))) (om-make-point 31 380) (om-make-point 453 147) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) (1 2 1)) ((4 4) ((1 (1 1)) 2 1)) ((4 4) ((1 (1 1)) -3))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (675)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1350)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (675)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (338)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (338)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1350)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (675)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (338)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (338)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (nil))) thechord)))) :tempo (quote ((1/4 88) nil)) :legato 99 :ties (quote (nil nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote (((nil) (nil) (nil)) (((nil) (nil)) (nil) (nil)) (((nil) (nil)) nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) (4)) ((4 4) ((1 (1 1)) 1 2)) ((4 4) (2 -2))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (2700)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (338)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (338)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (675)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1350)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1350)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (2))))) (load-port-info thechord (quote (nil))) thechord)))) :tempo (quote ((1/4 88) nil)) :legato 99 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote (((nil)) (((nil) (nil)) (nil) (nil)) ((nil) nil)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote ((((nil) (nil) (nil)) (((nil) (nil)) (nil) (nil)) (((nil) (nil)) nil)) (((nil)) (((nil) (nil)) (nil) (nil)) ((nil) nil))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale microplay obj-mode palette-mode inport outport deltapict cmnpref staff fontsize approx zoom notechancolor? grillestep mode winsize winpos show-stems)) (list nil nil 0 0 0 0 (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1 1))) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (list (quote g)) 24 2 1 nil 1000 0 18350450 2621450 (quote t))) t nil nil nil) (om-load-boxcall (quote bastype) "aux1111" (quote t) (quote nil) (om-make-point 42 136) (om-make-point 26 28) 15 "15" nil) (om-load-boxcall (quote bastype) "aux212" (quote t) (quote nil) (om-make-point 22 36) (om-make-point 133 28) (list (list 1) (list 1/2) (list 1/4) (list 1/8)) "((1) (1/2) (1/4) (1/8))" nil) (om-load-boxcall (quote genfun) "DECODE-ENGINE111" (quote rc::decode-engine) (quote ((om-load-inputfun (quote input-funbox) "from engine" "SOL" nil) (om-load-inputfun (quote input-funbox) "bpm" "TEMPO" 88) (om-load-inputfunmenu1 (quote input-funmenu) "format" "OUTPUT" (quote rc::voice) (list (list "poly-list" (quote (quote rc::poly))) (list "voice-list" (quote (quote rc::voice))) (list "simple" (quote (quote rc::simple))))))) (om-make-point 87 306) nil nil nil nil 1) (om-load-boxcall (quote genfun) "VOICE-DOMAIN111" (quote rc::voice-domain) (quote ((om-load-inputfun (quote input-funbox) "timesigns" "TIMESIGN-LIST" nil) (om-load-inputfun (quote input-funbox) "layer1" "RHYTHMCELL-LIST1" (list (list 1) (list 1/2) (list 1/4) (list 1/8))) (om-load-inputfun (quote input-funbox) "layer2" "RHYTHMCELL-LIST2" nil))) (om-make-point 77 97) nil nil nil nil 1) (om-load-boxcall (quote genfun) "PMC-ENGINE111" (quote omcs::pmc-engine) (quote ((om-load-inputfun (quote input-funbox) "s-space" "S-SPACE" nil) (om-load-inputfun (quote input-funbox) "rules" "RULES" nil))) (om-make-point 96 241) nil nil nil nil 1) (om-load-boxcall (quote genfun) "DOMAINS->PMC111" (quote rc::domains->pmc) (quote ((om-load-inputfun (quote input-funbox) "number of variables" "N-VAR" 5) (om-load-inputfun (quote input-funbox) "voice-domain" "VOICE0" nil))) (om-make-point 40 168) nil nil nil nil 1))) (quote ((1 0 2 0 nil 0) (0 0 2 1 nil 0) (2 0 3 0 nil 0) (8 0 5 1 nil 0) (10 0 8 0 nil 0) (7 0 9 1 nil 0) (4 0 9 2 nil 0) (11 0 10 0 nil 0) (3 0 10 1 nil 0) (6 0 11 0 nil 0) (9 0 11 1 nil 0))) nil 6.04))
